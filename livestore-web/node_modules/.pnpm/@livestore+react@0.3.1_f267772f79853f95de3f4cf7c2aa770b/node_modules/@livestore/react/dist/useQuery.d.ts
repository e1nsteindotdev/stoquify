import type { LiveQuery, LiveQueryDef, Store } from '@livestore/livestore';
import type { LiveQueries } from '@livestore/livestore/internal';
import * as otel from '@opentelemetry/api';
import React from 'react';
/**
 * Returns the result of a query and subscribes to future updates.
 *
 * Example:
 * ```tsx
 * const App = () => {
 *   const todos = useQuery(queryDb(tables.todos.query.where({ complete: true })))
 *   return <div>{todos.map((todo) => <div key={todo.id}>{todo.title}</div>)}</div>
 * }
 * ```
 */
export declare const useQuery: <TQuery extends LiveQueryDef.Any>(queryDef: TQuery, options?: {
    store?: Store;
}) => LiveQueries.GetResult<TQuery>;
/**
 */
export declare const useQueryRef: <TQuery extends LiveQueryDef.Any>(queryDef: TQuery, options?: {
    store?: Store;
    /** Parent otel context for the query */
    otelContext?: otel.Context;
    /** The name of the span to use for the query */
    otelSpanName?: string;
}) => {
    valueRef: React.RefObject<LiveQueries.GetResult<TQuery>>;
    queryRcRef: LiveQueries.RcRef<LiveQuery<LiveQueries.GetResult<TQuery>>>;
};
//# sourceMappingURL=useQuery.d.ts.map