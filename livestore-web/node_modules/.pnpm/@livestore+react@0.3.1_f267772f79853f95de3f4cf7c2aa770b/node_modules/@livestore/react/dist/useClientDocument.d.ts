import type { RowQuery } from '@livestore/common';
import { SessionIdSymbol } from '@livestore/common';
import { State } from '@livestore/common/schema';
import type { LiveQuery } from '@livestore/livestore';
export type UseRowResult<TTableDef extends State.SQLite.ClientDocumentTableDef.TraitAny> = [
    row: TTableDef['Value'],
    setRow: StateSetters<TTableDef>,
    id: string,
    query$: LiveQuery<TTableDef['Value']>
];
/**
 * Similar to `React.useState` but returns a tuple of `[state, setState, id, query$]` for a given table where ...
 *
 *   - `state` is the current value of the row (fully decoded according to the table schema)
 *   - `setState` is a function that can be used to update the document
 *   - `id` is the id of the document
 *   - `query$` is a `LiveQuery` that e.g. can be used to subscribe to changes to the document
 *
 * `useClientDocument` only works for client-document tables:
 *
 * ```tsx
 * const MyState = State.SQLite.clientDocument({
 *   name: 'MyState',
 *   schema: Schema.Struct({
 *     showSidebar: Schema.Boolean,
 *   }),
 *   default: { id: SessionIdSymbol, value: { showSidebar: true } },
 * })
 *
 * const MyComponent = () => {
 *   const [{ showSidebar }, setState] = useClientDocument(MyState)
 *   return (
 *     <div onClick={() => setState({ showSidebar: !showSidebar })}>
 *       {showSidebar ? 'Sidebar is open' : 'Sidebar is closed'}
 *     </div>
 *   )
 * }
 * ```
 *
 * If the table has a default id, `useClientDocument` can be called without an `id` argument. Otherwise, the `id` argument is required.
 */
export declare const useClientDocument: {
    <TTableDef extends State.SQLite.ClientDocumentTableDef.Trait<any, any, any, {
        partialSet: boolean;
        default: {
            id: string | SessionIdSymbol;
            value: any;
        };
    }>>(table: TTableDef, id?: State.SQLite.ClientDocumentTableDef.DefaultIdType<TTableDef> | SessionIdSymbol, options?: Partial<RowQuery.GetOrCreateOptions<TTableDef>>): UseRowResult<TTableDef>;
    <TTableDef extends State.SQLite.ClientDocumentTableDef.Trait<any, any, any, {
        partialSet: boolean;
        default: {
            id: string | SessionIdSymbol | undefined;
            value: any;
        };
    }>>(table: TTableDef, id: State.SQLite.ClientDocumentTableDef.DefaultIdType<TTableDef> | string | SessionIdSymbol, options?: Partial<RowQuery.GetOrCreateOptions<TTableDef>>): UseRowResult<TTableDef>;
};
export type Dispatch<A> = (action: A) => void;
export type SetStateAction<S> = Partial<S> | ((previousValue: S) => Partial<S>);
export type StateSetters<TTableDef extends State.SQLite.ClientDocumentTableDef.TraitAny> = Dispatch<SetStateAction<TTableDef['Value']>>;
//# sourceMappingURL=useClientDocument.d.ts.map