import type { Adapter, BootStatus, IntentionalShutdownCause, MigrationsReport } from '@livestore/common';
import { UnexpectedError } from '@livestore/common';
import type { LiveStoreSchema } from '@livestore/common/schema';
import type { OtelOptions, Store } from '@livestore/livestore';
import { StoreInterrupted } from '@livestore/livestore';
import type { OtelTracer } from '@livestore/utils/effect';
import { Effect, Schema } from '@livestore/utils/effect';
import type * as otel from '@opentelemetry/api';
import type { ReactElement, ReactNode } from 'react';
import React from 'react';
export interface LiveStoreProviderProps {
    schema: LiveStoreSchema;
    /**
     * The `storeId` can be used to isolate multiple stores from each other.
     * So it can be useful for multi-tenancy scenarios.
     *
     * The `storeId` is also used for persistence.
     *
     * Make sure to also configure `storeId` in LiveStore Devtools (e.g. in Vite plugin).
     *
     * @default 'default'
     */
    storeId?: string;
    boot?: (store: Store<LiveStoreSchema>, ctx: {
        migrationsReport: MigrationsReport;
        parentSpan: otel.Span;
    }) => void | Promise<void> | Effect.Effect<void, unknown, OtelTracer.OtelTracer>;
    otelOptions?: Partial<OtelOptions>;
    renderLoading?: (status: BootStatus) => ReactElement;
    renderError?: (error: UnexpectedError | unknown) => ReactElement;
    renderShutdown?: (cause: IntentionalShutdownCause | StoreInterrupted) => ReactElement;
    adapter: Adapter;
    /**
     * In order for LiveStore to apply multiple events in a single render,
     * you need to pass the `batchUpdates` function from either `react-dom` or `react-native`.
     *
     * ```ts
     * // With React DOM
     * import { unstable_batchedUpdates as batchUpdates } from 'react-dom'
     *
     * // With React Native
     * import { unstable_batchedUpdates as batchUpdates } from 'react-native'
     * ```
     */
    batchUpdates: (run: () => void) => void;
    disableDevtools?: boolean;
    signal?: AbortSignal;
    /**
     * Currently only used in the web adapter:
     * If true, registers a beforeunload event listener to confirm unsaved changes.
     *
     * @default true
     */
    confirmUnsavedChanges?: boolean;
    /**
     * Payload that will be passed to the sync backend when connecting
     *
     * @default undefined
     */
    syncPayload?: Schema.JsonValue;
    debug?: {
        instanceId?: string;
    };
}
export declare const LiveStoreProvider: ({ renderLoading, renderError, renderShutdown, otelOptions, children, schema, storeId, boot, adapter, batchUpdates, disableDevtools, signal, confirmUnsavedChanges, syncPayload, debug, }: LiveStoreProviderProps & {
    children?: ReactNode;
}) => React.ReactElement;
//# sourceMappingURL=LiveStoreProvider.d.ts.map