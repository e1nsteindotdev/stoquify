import { jsx as _jsx, Fragment as _Fragment } from "react/jsx-runtime";
import { computed } from '@livestore/livestore';
import React from 'react';
import { useQuery } from '../../useQuery.js';
/**
 * This component is a helper component for rendering a list of items for a LiveQuery of an array of items.
 * The idea is that instead of letting React handle the rendering of the items array directly,
 * we derive a item LiveQuery for each item which moves the reactivity to the item level when a single item changes.
 *
 * In the future we want to make this component even more efficient by using incremental rendering (https://github.com/livestorejs/livestore/pull/55)
 * e.g. when an item is added/removed/moved to only re-render the affected DOM nodes.
 */
export const LiveList = ({ items$, renderItem, getKey }) => {
    const [hasMounted, setHasMounted] = React.useState(false);
    React.useEffect(() => setHasMounted(true), []);
    const keys = useQuery(computed((get) => get(items$).map(getKey)));
    const arr = React.useMemo(() => keys.map((key) => 
    // TODO figure out a way so that `item$` returns an ordered lookup map to more efficiently find the item by key
    [
        key,
        computed((get) => get(items$).find((item) => getKey(item, 0) === key), {
            deps: [key],
        }),
    ]), [getKey, items$, keys]);
    return (_jsx(_Fragment, { children: arr.map(([key, item$], index) => (_jsx(ItemWrapperMemo, { itemKey: key, "item$": item$, opts: { isInitialListRender: !hasMounted, index }, renderItem: renderItem }, key))) }));
};
const ItemWrapper = ({ item$, opts, renderItem, }) => {
    const item = useQuery(item$);
    return _jsx(_Fragment, { children: renderItem(item, opts) });
};
const ItemWrapperMemo = React.memo(ItemWrapper, (prev, next) => prev.itemKey === next.itemKey &&
    prev.renderItem === prev.renderItem &&
    prev.opts.index === next.opts.index &&
    prev.opts.isInitialListRender === next.opts.isInitialListRender);
//# sourceMappingURL=LiveList.js.map