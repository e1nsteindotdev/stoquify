import React from 'react';
/**
 * A variant of `React.useState` which allows the `inputState` to change over time as well.
 * Important: This hook is synchronous / single-render-pass (i.e. doesn't use `useEffect` or `setState` directly).
 *
 * Notes:
 * - The output state is always reset to the input state in case the input state changes (i.e. the previous "external" `setStateAndRerender` call is forgotten)
 * - This hook might not work properly with React Suspense
 * - Also see this Tweet for more potential problems: https://twitter.com/schickling/status/1677317711104278528
 *
 */
export declare const useStateRefWithReactiveInput: <T>(inputState: T) => [React.RefObject<T>, (newState: T | ((prev: T) => T)) => void];
//# sourceMappingURL=useStateRefWithReactiveInput.d.ts.map