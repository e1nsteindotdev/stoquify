{
  "version": 3,
  "sources": ["../../.pnpm/@livestore+adapter-web@0.3.1_505c75a1204e4cf21acbbd6b3e225a6b/node_modules/@livestore/adapter-web/src/web-worker/leader-worker/make-leader-worker.ts"],
  "sourcesContent": ["import type { SqliteDb, SyncOptions } from '@livestore/common'\nimport { Devtools, UnexpectedError } from '@livestore/common'\nimport type { DevtoolsOptions } from '@livestore/common/leader-thread'\nimport { configureConnection, Eventlog, LeaderThreadCtx, makeLeaderThreadLayer } from '@livestore/common/leader-thread'\nimport type { LiveStoreSchema } from '@livestore/common/schema'\nimport { LiveStoreEvent } from '@livestore/common/schema'\nimport * as WebmeshWorker from '@livestore/devtools-web-common/worker'\nimport { sqliteDbFactory } from '@livestore/sqlite-wasm/browser'\nimport { loadSqlite3Wasm } from '@livestore/sqlite-wasm/load-wasm'\nimport { isDevEnv, LS_DEV } from '@livestore/utils'\nimport type { HttpClient, Scope, WorkerError } from '@livestore/utils/effect'\nimport {\n  BrowserWorkerRunner,\n  Effect,\n  FetchHttpClient,\n  identity,\n  Layer,\n  Logger,\n  LogLevel,\n  OtelTracer,\n  Scheduler,\n  Stream,\n  TaskTracing,\n  WorkerRunner,\n} from '@livestore/utils/effect'\nimport type * as otel from '@opentelemetry/api'\n\nimport * as OpfsUtils from '../../opfs-utils.js'\nimport { getStateDbFileName, sanitizeOpfsDir } from '../common/persisted-sqlite.js'\nimport { makeShutdownChannel } from '../common/shutdown-channel.js'\nimport * as WorkerSchema from '../common/worker-schema.js'\n\nexport type WorkerOptions = {\n  schema: LiveStoreSchema\n  sync?: SyncOptions\n  otelOptions?: {\n    tracer?: otel.Tracer\n  }\n}\n\nif (isDevEnv()) {\n  globalThis.__debugLiveStoreUtils = {\n    opfs: OpfsUtils,\n    blobUrl: (buffer: Uint8Array) => URL.createObjectURL(new Blob([buffer], { type: 'application/octet-stream' })),\n    runSync: (effect: Effect.Effect<any, any, never>) => Effect.runSync(effect),\n    runFork: (effect: Effect.Effect<any, any, never>) => Effect.runFork(effect),\n  }\n}\n\nexport const makeWorker = (options: WorkerOptions) => {\n  makeWorkerEffect(options).pipe(Effect.runFork)\n}\n\nexport const makeWorkerEffect = (options: WorkerOptions) => {\n  const TracingLive = options.otelOptions?.tracer\n    ? Layer.unwrapEffect(Effect.map(OtelTracer.make, Layer.setTracer)).pipe(\n        Layer.provideMerge(Layer.succeed(OtelTracer.OtelTracer, options.otelOptions.tracer)),\n      )\n    : undefined\n\n  return makeWorkerRunnerOuter(options).pipe(\n    Layer.provide(BrowserWorkerRunner.layer),\n    WorkerRunner.launch,\n    Effect.scoped,\n    Effect.tapCauseLogPretty,\n    Effect.annotateLogs({ thread: self.name }),\n    Effect.provide(Logger.prettyWithThread(self.name)),\n    Effect.provide(FetchHttpClient.layer),\n    LS_DEV ? TaskTracing.withAsyncTaggingTracing((name) => (console as any).createTask(name)) : identity,\n    TracingLive ? Effect.provide(TracingLive) : identity,\n    // We're using this custom scheduler to improve op batching behaviour and reduce the overhead\n    // of the Effect fiber runtime given we have different tradeoffs on a worker thread.\n    // Despite the \"message channel\" name, is has nothing to do with the `incomingRequestsPort` above.\n    Effect.withScheduler(Scheduler.messageChannel()),\n    // We're increasing the Effect ops limit here to allow for larger chunks of operations at a time\n    Effect.withMaxOpsBeforeYield(4096),\n    Logger.withMinimumLogLevel(LogLevel.Debug),\n  )\n}\n\nconst makeWorkerRunnerOuter = (\n  workerOptions: WorkerOptions,\n): Layer.Layer<never, WorkerError.WorkerError, WorkerRunner.PlatformRunner | HttpClient.HttpClient> =>\n  WorkerRunner.layerSerialized(WorkerSchema.LeaderWorkerOuter.InitialMessage, {\n    // Port coming from client session and forwarded via the shared worker\n    InitialMessage: ({ port: incomingRequestsPort, storeId, clientId }) =>\n      Effect.gen(function* () {\n        yield* makeWorkerRunnerInner(workerOptions).pipe(\n          Layer.provide(BrowserWorkerRunner.layerMessagePort(incomingRequestsPort)),\n          WorkerRunner.launch,\n          Effect.scoped,\n          Effect.withSpan('@livestore/adapter-web:worker:wrapper:InitialMessage:innerFiber'),\n          Effect.tapCauseLogPretty,\n          Effect.provide(\n            WebmeshWorker.CacheService.layer({ nodeName: Devtools.makeNodeName.client.leader({ storeId, clientId }) }),\n          ),\n          Effect.forkScoped,\n        )\n\n        return Layer.empty\n      }).pipe(Effect.withSpan('@livestore/adapter-web:worker:wrapper:InitialMessage'), Layer.unwrapScoped),\n  })\n\nconst makeWorkerRunnerInner = ({ schema, sync: syncOptions }: WorkerOptions) =>\n  WorkerRunner.layerSerialized(WorkerSchema.LeaderWorkerInner.Request, {\n    InitialMessage: ({ storageOptions, storeId, clientId, devtoolsEnabled, debugInstanceId, syncPayload }) =>\n      Effect.gen(function* () {\n        const sqlite3 = yield* Effect.promise(() => loadSqlite3Wasm())\n        const makeSqliteDb = sqliteDbFactory({ sqlite3 })\n        const runtime = yield* Effect.runtime<never>()\n\n        const makeDb = (kind: 'state' | 'eventlog') =>\n          makeSqliteDb({\n            _tag: 'opfs',\n            opfsDirectory: sanitizeOpfsDir(storageOptions.directory, storeId),\n            fileName: kind === 'state' ? getStateDbFileName(schema) : 'eventlog.db',\n            configureDb: (db) =>\n              configureConnection(db, {\n                //  The persisted databases use the AccessHandlePoolVFS which always uses a single database connection.\n                //  Multiple connections are not supported. This means that we can use the exclusive locking mode to\n                //  avoid unnecessary system calls and enable the use of the WAL journal mode without the use of shared memory.\n                // TODO bring back exclusive locking mode when `WAL` is working properly\n                // lockingMode: 'EXCLUSIVE',\n                foreignKeys: true,\n              }).pipe(Effect.provide(runtime), Effect.runSync),\n          }).pipe(Effect.acquireRelease((db) => Effect.try(() => db.close()).pipe(Effect.ignoreLogged)))\n\n        // Might involve some async work, so we're running them concurrently\n        const [dbState, dbEventlog] = yield* Effect.all([makeDb('state'), makeDb('eventlog')], {\n          concurrency: 2,\n        })\n\n        const devtoolsOptions = yield* makeDevtoolsOptions({ devtoolsEnabled, dbState, dbEventlog })\n        const shutdownChannel = yield* makeShutdownChannel(storeId)\n\n        return makeLeaderThreadLayer({\n          schema,\n          storeId,\n          clientId,\n          makeSqliteDb,\n          syncOptions,\n          dbState,\n          dbEventlog,\n          devtoolsOptions,\n          shutdownChannel,\n          syncPayload,\n        })\n      }).pipe(\n        Effect.tapCauseLogPretty,\n        UnexpectedError.mapToUnexpectedError,\n        Effect.withPerformanceMeasure('@livestore/adapter-web:worker:InitialMessage'),\n        Effect.withSpan('@livestore/adapter-web:worker:InitialMessage'),\n        Effect.annotateSpans({ debugInstanceId }),\n        Layer.unwrapScoped,\n      ),\n    GetRecreateSnapshot: () =>\n      Effect.gen(function* () {\n        const workerCtx = yield* LeaderThreadCtx\n\n        // NOTE we can only return the cached snapshot once as it's transferred (i.e. disposed), so we need to set it to undefined\n        // const cachedSnapshot =\n        //   result._tag === 'Recreate' ? yield* Ref.getAndSet(result.snapshotRef, undefined) : undefined\n\n        // return cachedSnapshot ?? workerCtx.db.export()\n\n        const snapshot = workerCtx.dbState.export()\n        return { snapshot, migrationsReport: workerCtx.initialState.migrationsReport }\n      }).pipe(\n        UnexpectedError.mapToUnexpectedError,\n        Effect.withSpan('@livestore/adapter-web:worker:GetRecreateSnapshot'),\n      ),\n    PullStream: ({ cursor }) =>\n      Effect.gen(function* () {\n        const { syncProcessor } = yield* LeaderThreadCtx\n        return syncProcessor.pull({ cursor })\n      }).pipe(\n        Stream.unwrapScoped,\n        // For debugging purposes\n        // Stream.tapLogWithLabel('@livestore/adapter-web:worker:PullStream'),\n      ),\n    PushToLeader: ({ batch }) =>\n      Effect.andThen(LeaderThreadCtx, ({ syncProcessor }) =>\n        syncProcessor.push(\n          batch.map((event) => new LiveStoreEvent.EncodedWithMeta(event)),\n          // We'll wait in order to keep back pressure on the client session\n          { waitForProcessing: true },\n        ),\n      ).pipe(Effect.uninterruptible, Effect.withSpan('@livestore/adapter-web:worker:PushToLeader')),\n    Export: () =>\n      Effect.andThen(LeaderThreadCtx, (_) => _.dbState.export()).pipe(\n        UnexpectedError.mapToUnexpectedError,\n        Effect.withSpan('@livestore/adapter-web:worker:Export'),\n      ),\n    ExportEventlog: () =>\n      Effect.andThen(LeaderThreadCtx, (_) => _.dbEventlog.export()).pipe(\n        UnexpectedError.mapToUnexpectedError,\n        Effect.withSpan('@livestore/adapter-web:worker:ExportEventlog'),\n      ),\n    BootStatusStream: () =>\n      Effect.andThen(LeaderThreadCtx, (_) => Stream.fromQueue(_.bootStatusQueue)).pipe(Stream.unwrap),\n    GetLeaderHead: () =>\n      Effect.gen(function* () {\n        const workerCtx = yield* LeaderThreadCtx\n        return Eventlog.getClientHeadFromDb(workerCtx.dbEventlog)\n      }).pipe(UnexpectedError.mapToUnexpectedError, Effect.withSpan('@livestore/adapter-web:worker:GetLeaderHead')),\n    GetLeaderSyncState: () =>\n      Effect.gen(function* () {\n        const workerCtx = yield* LeaderThreadCtx\n        return yield* workerCtx.syncProcessor.syncState\n      }).pipe(\n        UnexpectedError.mapToUnexpectedError,\n        Effect.withSpan('@livestore/adapter-web:worker:GetLeaderSyncState'),\n      ),\n    Shutdown: () =>\n      Effect.gen(function* () {\n        yield* Effect.logDebug('[@livestore/adapter-web:worker] Shutdown')\n\n        // Buy some time for Otel to flush\n        // TODO find a cleaner way to do this\n        yield* Effect.sleep(300)\n      }).pipe(UnexpectedError.mapToUnexpectedError, Effect.withSpan('@livestore/adapter-web:worker:Shutdown')),\n    ExtraDevtoolsMessage: ({ message }) =>\n      Effect.andThen(LeaderThreadCtx, (_) => _.extraIncomingMessagesQueue.offer(message)).pipe(\n        UnexpectedError.mapToUnexpectedError,\n        Effect.withSpan('@livestore/adapter-web:worker:ExtraDevtoolsMessage'),\n      ),\n    'DevtoolsWebCommon.CreateConnection': WebmeshWorker.CreateConnection,\n  })\n\nconst makeDevtoolsOptions = ({\n  devtoolsEnabled,\n  dbState,\n  dbEventlog,\n}: {\n  devtoolsEnabled: boolean\n  dbState: SqliteDb\n  dbEventlog: SqliteDb\n}): Effect.Effect<DevtoolsOptions, UnexpectedError, Scope.Scope | WebmeshWorker.CacheService> =>\n  Effect.gen(function* () {\n    if (devtoolsEnabled === false) {\n      return { enabled: false }\n    }\n\n    const { node } = yield* WebmeshWorker.CacheService\n\n    return {\n      enabled: true,\n      boot: Effect.gen(function* () {\n        const persistenceInfo = {\n          state: dbState.metadata.persistenceInfo,\n          eventlog: dbEventlog.metadata.persistenceInfo,\n        }\n\n        return { node, persistenceInfo, mode: 'direct' }\n      }),\n    }\n  })\n"],
  "mappings": "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",
  "names": []
}
